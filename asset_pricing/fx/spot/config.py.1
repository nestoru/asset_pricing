# asset_pricing/fx/spot/config.py

from pydantic import BaseModel, validator
from typing import List, Union
import json
import os
import logging

logger = logging.getLogger(__name__)

class DatabaseConfig(BaseModel):
    host: str
    port: int
    database: str
    user: str
    password: str
    db_schema: str  # Renamed to avoid shadowing BaseModel.schema()

class MockedFXSpotProfile(BaseModel):
    profile_name: str
    api_type: str
    tickers: List[str]
    local_caching_path: str
    seed_data_path: str
    num_records: int

class AlphaVantageFXSpotProfile(BaseModel):
    profile_name: str
    api_type: str
    tickers: List[str]
    local_caching_path: str
    api_key: str
    base_url: str
    polling_interval: int

SpotFXProfile = Union[MockedFXSpotProfile, AlphaVantageFXSpotProfile]

class SpotFXConfig(BaseModel):
    profiles: List[SpotFXProfile]

    @validator('profiles', pre=True)
    def parse_profiles(cls, profiles):
        parsed_profiles = []
        for profile in profiles:
            api_type = profile.get('api_type')
            if api_type == 'mocked_fx_spot':
                parsed_profiles.append(MockedFXSpotProfile(**profile))
            elif api_type == 'alphavantage':
                parsed_profiles.append(AlphaVantageFXSpotProfile(**profile))
            else:
                raise ValueError(f"Unsupported api_type: {api_type}")
        return parsed_profiles

class FXConfig(BaseModel):
    spot: SpotFXConfig

class AssetPricingBatchConfig(BaseModel):
    fx: FXConfig

class Config(BaseModel):
    asset_pricing_batch: AssetPricingBatchConfig
    database: DatabaseConfig

    def get_spot_profile(self, profile_name: str) -> SpotFXProfile:
        for profile in self.asset_pricing_batch.fx.spot.profiles:
            if profile.profile_name == profile_name:
                return profile
        raise ValueError(f"Profile '{profile_name}' not found.")

def load_config(config_file: str) -> Config:
    if not os.path.exists(config_file):
        logger.error(f"Configuration file {config_file} not found.")
        raise FileNotFoundError(f"Configuration file {config_file} not found.")
    with open(config_file, 'r') as f:
        config_dict = json.load(f)
    return Config(**config_dict)

